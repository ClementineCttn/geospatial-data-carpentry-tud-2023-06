---
title: "Session 4: Combining Vector and Raster Data"
author: "ClÃ©mentine Cottineau"
format: 
  revealjs:
    logo: BKTUD.png
    css: logo.css
    footer: "Data Carpentry for Geospatial Data"
    chalkboard: true
    incremental: true   
    theme: [default, custom.scss]
---


# Session 4a: Vector data from OpenStreetMap


## Objectives:
- Explain how **OpenStreetMap** (OSM) geodata works
- Demonstrate how to **import, select, and visualise OSM vector data**


```{r}
#| label: setup
#| include: false

library(tidyverse)
library(dplyr)
library(sf)
library(ggplot2)
library(remotes)
library(osmdata)
library(osmextract)


knitr::opts_chunk$set(
  cache = FALSE,
  echo = TRUE,
  message = FALSE, 
  warning = FALSE
  )
```


## Open Street Map (OSM) 

is a collaborative project which aims at mapping the world and sharing geospatial data in an open way.

![](fig/OSM1.png){fig-align="center"}

## OSM  `r emo::ji("map")`

Anyone can contribute, by mapping geographical objects their encounter by

- **mapping spatial features** (e.g. buildings or roads), from located device or satellite imagery.
- adding **topical information** on existing map objects (their name, function, capacity, etc.)


## OSM  `r emo::ji("map")`

- This information is then **validated** by other users and eventually added to the common "map" or information system. 
- This ensures that the information is **accessible, open, verified, accurate** and **up-to-date**. cf. HOT: Humanitarian OpenStreetMap Team


## OSM  `r emo::ji("map")`

The geospatial data underlying this interface is made of geometrical objects (i.e. points, lines, polygons) and their associated tags (#building #height, #road #secondary #90kph, etc.).


## How to extract geospatial data from Open Street Map with R?

The first thing to do is to define the area within which you want to retrieve data, aka the *bounding box*. This can be defined easily using a place name and the function `getbb()` from the package `osmdata`. 

> "This function uses the free Nominatim API provided by OpenStreetMap to find the bounding box (bb) associated with place names."

## The Bounding Box `r emo::ji("square")` 

```{r osm-bounding-box}
bb <- getbb('Delft', format_out = 'sf_polygon')
bb
```

A Problem with download? Try:

```{r proxy}
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
```

Why multiple polygons?

Because there are different responses from the API query, corresponding to different objects at the same location, or different objects are different locations.

## Extracting OSM features

A [feature](https://wiki.openstreetmap.org/wiki/Map_features) in the OSM language is a category or tag of a geospatial object. 
**Features** are described by general keys (e.g. "building", "boundary", "landuse", "highway")
Features are decomposed into sub-categories (values) such as "farm", "hotel" or "house" for `buildings`, "motorway", "secondary" and "residential" for `highway`. 
This determines how they are represented on the map.

## Extracting OSM features

We use the function `opq()` that stands for "overpass query".
```{r osm-feature}
#| eval: false
x <- opq(bbox = bb) |> 
   add_osm_feature(key = 'building') |>
    osmdata_sf ()
```



What is this x object made of?

## Extracting OSM features

```{r osm-feature-preview}
#| eval: false
head(x$osm_polygons)
```

- It is a **table** of all the buildings contained in the bounding box, which gives us their **OSM id**, their **geometry** and a range of **attributes**, such as their name, building material, building date, etc. 
- The **completion** level of this table depends on user contributions and open resources (here for instance: BAG, different in other countries).


## Mapping attributes

Case Study: we are interested in mapping urbanisation in Delft in the 20th and 21st centuries.
We need to look into specific attributes:

- the **building age** of buildings
- with a **subset** of buildings from after 1900
- within the **Delft** bounding box

## Projections

First, we are going to select the polygons and reproject them with the Amersfoort/RD New projection, suited for maps centered on the Netherlands.

```{r reproject}
#| eval: false
buildings <- x$osm_polygons |> 
  st_transform(.,crs=28992)
```


## Mapping urbanisation in Delft

Then we create a variable which a threshold at 1900. Every date prior to 1900 will be recoded 1900, so that buildings older than 1900 will be represented with the same shade.

Then we use the `ggplot` function to visualise the buildings by age. The specific function to represent information as a map is `geom_sf()`. The rest works like other graphs and visualisation, with `aes()` for the aesthetics.

## Mapping urbanisation in Delft

```{r map-age}
#| eval: false

summary(buildings$start_date)

buildings$build_date <- as.numeric(ifelse(buildings$start_date <1900, 1900,buildings$start_date))

 ggplot(data = buildings) +
   geom_sf(aes(fill = build_date, colour=build_date))  +
   scale_fill_viridis_c(option = "viridis")+
   scale_colour_viridis_c(option = "viridis")
```


## Mapping urbanisation in Delft

:::: {.columns}

::: {.column width="60%"}
![](fig/rmd-04a-map-age-1.png){fig-align="center"}
:::

::: {.column width="40%"}
- the historical centre of Delft 
- the first ring in the 1920s
- the South-West extension (1970s-1990s)
- East (2000s)
- North-West (2010s).

:::

::::


## Mapping urbanisation in Delft

This centre-periphery and sectoral urban development is quite common. 
Now for a less typical example, can you reproduce this map for the city of **Rotterdam**. 
But instead of pre-1900 building, we want to look at **post-war buildings**. 

*It will take some time to extract all buildings, so we will check the result after the coffee break.*


## `r emo::ji("alarm")` Challenge: post-war buildings, R'dam

```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 20)
```

![](fig/rmd-04a-unnamed-chunk-2-1.png){fig-align="center"}

A Problem with download? Try:

```{r proxy_b}
assign("has_internet_via_proxy", TRUE, environment(curl::has_internet))
```

## Solution

```{r}
#| eval: false
bb <- getbb('Rotterdam', format_out = 'sf_polygon')
x <- opq(bbox = bb) |> 
add_osm_feature(key = 'building') |>
osmdata_sf ()

buildings <- x$osm_polygons |> 
  st_transform(.,crs=28992)

buildings$build_date <- as.numeric(
  ifelse(buildings$start_date <1945,
         1945,
         buildings$start_date))
ggplot(data = buildings) +
  geom_sf(aes(fill = build_date, colour=build_date))  +
  scale_fill_viridis_c(option = "viridis")+
  scale_colour_viridis_c(option = "viridis")
```

## Summary and keypoints
We have seen how OpenStreetMap (OSM) geodata works and how to import, select, and visualise OSM vector data.

In short:

- Use the `osmextract` package
- Select features and attributes among osm tags
- Use the `ggplot` package to map OSM data


# Session 4b: Basic GIS operations with the `sf` package


## Objectives:

- Show how to create spatial **buffers and centroids**
- Demonstrate how to **intersect** vector data
- Present the function to retrieve the **area** of polygons


## the 'sf' package `r emo::ji("box")` 

- `sf` is a package which supports simple features (sf), ["a standardized way to
encode spatial vector data."](https://cran.r-project.org/web/packages/sf/sf.pdf).

- It contains a large set of functions to achieve all the operations on vector spatial data for which you might use traditional GIS software: change the coordinate system, join layers, intersect or unit polygons, create buffers and centroids, etc. cf. the `sf` [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/sf.pdf).

- We are going to go through some of these basics with the case study of Rotterdam buildings.


## Conservation in Rotterdam `r emo::ji("building")` 

Let's focus on really old building and imagine we're in charge of their conservation. We want to know **how much of the city would be affected by a non-construction zone of 500m around pre-1800 buildings**.

Let's select them and see where they are.


## Conservation in Rotterdam `r emo::ji("building")` 

```{r old-buildings}
#| eval: false
old <- 1800 # year prior to which you consider a building old
 
old_buildings <- buildings |>
  filter(start_date <= old)
 ggplot(data = old_buildings) + geom_sf()
```


![](fig/rmd-04b-old-buildings-1.png){fig-align="center"}

## `r emo::ji("alarm")`Challenge: make it more visible!

```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 3)
```

Make the buildings show in red on the "map"

## Solution (one of them)


:::: {.columns}

::: {.column width="50%"}

```{r old-buildings_red}
#| eval: false
ggplot(data=old_buildings) + 
  geom_sf(colour="red")
```

:::

::: {.column width="50%"}

![](fig/rmd-04b-old-buildings-1-red.png){fig-align="center"}

:::

::::


## Basic GIS operations

As conservationists, we want to create a zone around historical buildings where building regulation will have special restrictions to preserve historical buildings. 

## Buffer 

Let's say this zone should be 500 meters. In GIS terms, we want to create a buffer around polygons. 
The corresponding function `sf` is `st_buffer`, with 2 arguments:

- "x": the polygons around which to create buffers
- "dist": the radius of the buffer.


```{r buffers}
#| eval: false
 distance <- 500 # in meters 
 buffer_old_buildings <- st_buffer(x = old_buildings, dist = distance)
 ggplot(data = buffer_old_buildings) + geom_sf()
```


## Buffer 


```{r buffers2}
#| eval: false
 ggplot(data = buffer_old_buildings) + geom_sf()
```

![](fig/rmd-04b-buffers-1.png){fig-align="center"}

## Union

Now, we have a lot of overlapping buffers. 
We would rather create a **unique** conservation zone rather than overlapping ones in that case. 
So we have to fuse (or dissolve) the overlapping buffers into one polygon. This operation is called **union** in `sf` and the corresponding function is `st_union`.

```{r union}
#| eval: false
 single_old_buffer <- st_union(buffer_old_buildings) |>
  st_cast(to = "POLYGON") |> 
  st_as_sf()  
single_old_buffer <- single_old_buffer |>
  add_column("ID"=as.factor(1:nrow(single_old_buffer)))  |>
  st_transform(.,crs=28992) 
```

We also use `st_cast()` to explicit the type of the resulting object (*POLYGON* instead of the default *MULTIPOLYGON*), `st_as_sf()` to transform the polygon into an `sf` object.


## Centroids

For the sake of visualisation speed, we would like to represent buildings by a single point (for instance: their geometric centre) rather than their actual footprint. 

This operation means defining their centroid and the corresponding function is `st_centroid`.

```{r centroids}
#| eval: false
sf::sf_use_s2(FALSE)
centroids_old <- st_centroid(old_buildings) |> st_transform(.,crs=28992)  
ggplot() + 
    geom_sf(data = single_old_buffer, aes(fill=ID)) +
    geom_sf(data = centroids_old)
```


## Centroids

![](fig/rmd-04b-centroids-1.png){fig-align="center"}

## Intersection
Now what we would like to distinguish conservation areas based on the number of historic buildings they contain. In GIS terms, we would like to know how many centroids each fused buffer polygon contains. This operation means intersecting the layer of polygons with the layer of points and the corresponding function is `st_intersection`.


```{r intersection}
#| eval: false
 centroids_buffers <- st_intersection(centroids_old,single_old_buffer) |> 
   add_column(n=1)

 centroid_by_buffer <- centroids_buffers |> 
   group_by(ID) |>
   summarise(n = sum(n))
 
 single_buffer <- single_old_buffer |> 
   add_column(n_buildings = centroid_by_buffer$n)
```


## `r emo::ji("alarm")`Challenge: visualise the new buffers

```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
```

Represent visually how many buildings are contained in each of the new buffers

## Solution (one of them)


```{r intersection_viz}
#| eval: false
 ggplot() + 
   geom_sf(data = single_buffer, aes(fill=n_buildings)) +
   scale_fill_viridis_c(alpha = 0.8,
                        begin = 0.6,
                        end = 1,
                        direction = -1,
                        option = "B")
```

![](fig/rmd-04b-intersection-1.png){fig-align="center"}


## Final output:

Let's map this layer over the initial map of individual buildings.

![](fig/rmd-04b-visu-1800-1.png){fig-align="center"}

## Final output:

```{r visu-1800}
#| eval: false

ggplot() + 
   geom_sf(data = buildings) +
   geom_sf(data = single_buffer, aes(fill=n_buildings), colour = NA) +
   scale_fill_viridis_c(alpha = 0.6,
                        begin = 0.6,
                        end = 1,
                        direction = -1,
                        option = "B") 

```
 
 
 

## `r emo::ji("alarm")`Challenge: map the new conservation rules

```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 15)
```

Conservation rules have changed! 
The historical threshold now applies to all **pre-war buildings**, but the distance to these building is reduced to **100 meters**. 
Can you map the number of all buildings per 100m fused buffer?

![](fig/rmd-04b-prewar-replication-1.png){fig-align="center"}


## Solution (one of them)

```{r intersection_viz_2}
#| eval: false

 old <- 1939 
 distance <- 100
 #select
 old_buildings <- filter(buildings, start_date <= old)
 #buffer
 buffer_old_buildings <- st_buffer(old_buildings, dist = distance)
  #union
 single_old_buffer <- st_union(buffer_old_buildings) |> 
   st_cast(to = "POLYGON") |> st_as_sf()  |> 
   add_column("ID"=1:nrow(.))  |> st_transform(.,crs=4326) 
 #centroids
 centroids_old <- st_centroid(old_buildings) |> st_transform(.,crs=4326)  
  #intersection
  centroids_buffers <- st_intersection(centroids_old,single_old_buffer) |> 
   add_column(n=1)
 centroid_by_buffer <- centroids_buffers |> 
   group_by(ID) |>
   summarise(
   n = sum(n)
   )
 single_buffer <- single_old_buffer |> add_column(n_buildings = centroid_by_buffer$n)
  ggplot() + 
   geom_sf(data = buildings) +
   geom_sf(data = single_buffer, aes(fill=n_buildings), colour = NA) +
   scale_fill_viridis_c(alpha = 0.6,
                        begin = 0.6,
                        end = 1,
                        direction = -1,
                        option = "B") 
```


## `r emo::ji("alarm")` Challenge: visualise the density of old buildings

```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 5)
```

There are many pre-war buildings and the buffers are large so the number of old buildings is not very meaningful. 

Let's compute the **density** of old buildings per buffer zone (= number of buildings / area of buffer).

![](fig/rmd-04b-area-1.png){fig-align="center"}


## Problem: how to compute the area of a polygon?

```{r area}
#| eval: false
single_buffer$area <- st_area(single_buffer) %>%
  units::set_units(., km^2)

single_buffer$old_buildings_per_km2 <- as.numeric(single_buffer$n_buildings / single_buffer$area)

 ggplot() + 
   geom_sf(data = buildings) +
   geom_sf(data = single_buffer, aes(fill=old_buildings_per_km2), colour = NA) +
   scale_fill_viridis_c(alpha = 0.6,
                        begin = 0.6,
                        end = 1,
                        direction = -1,
                        option = "B") 
 
```



## Summary and keypoints

We have seen how to create spatial buffers and centroids, how to intersect vector data and how retrieve the area of polygons.

In short:

- Use the `sf` package to treat geospatial data
- Use the `st_*` functions for basic GIS operations
- Use the `ggplot` package to map the results




# Session 4c: Manipulating rater and vector data

How can I crop raster objects to vector objects, and extract the summary of raster pixels?

## Objectives & Keypoints:

- Crop a raster to the extent of a vector layer.
- Extract values from a raster that correspond to a vector file overlay.
- Use the `crop()` function to crop a raster object.
- Use the `extract()` function to extract pixels from a raster object that fall within a particular extent boundary.
-

## Introduction

We often work with spatial layers that have different spatial extents. The spatial extent of a shapefile or R spatial object represents the geographic âedgeâ or location that is the furthest north, south east and west. Thus is represents the overall geographic coverage of the spatial object.

![Image Source: National Ecological Observatory Network (NEON)](fig/spatial_extent.png)


## Introduction

The graphic below illustrates the extent of several of the spatial layers that we have worked with in this workshop:


:::: {.columns}

::: {.column width="50%"}
![Image Source: DCC](fig/rmd-11-compare-data-extents-1.png)

:::

::: {.column width="50%"}
- Area of interest (AOI) â blue
- Roads and trails â purple
- Vegetation plot locations (marked with white dots)â black
- A canopy height model (CHM) in GeoTIFF format â green

:::

::::




## Introduction

Frequent use cases of cropping a raster file include 

- reducing file size 
- creating maps. 

Sometimes we have a raster file that is much larger than our study area or area of interest. It is often more efficient to crop the raster to the extent of our study area to reduce file sizes as we process our data. 

Cropping a raster can also be useful when creating pretty maps so that the raster layer matches the extent of the desired vector layers.


## Import the raster 

We import a *DSM* (Digital Surface Model) and a *DTM* (Digital Terrain Model) of TU-Delft.

The difference between the two altitudes gives us a *CHM*, a Canopy Height Model.

```{r}
#| eval: false
DSM_TUD <- raster(here("data","tud-dsm.tif"))
DTM_TUD <- raster(here("data","tud-dtm.tif"))
CHM_TUD <- DSM_TUD - DTM_TUD

CHM_TUD_df <- as.data.frame(CHM_TUD, xy = TRUE)

oai_boundary_tudlib <- st_as_sfc(st_bbox(raster(here("data","tudlib-rgb.tif"))))
```

`st_as_sfc()` is a useful function to convert files to an `sf` format.

## Crop a Raster Using Vector Extent

We can use the `crop()` function to crop a raster to the extent of another spatial object. To do this, we need to specify the raster to be cropped and the spatial object that will be used to crop the raster. R will use the extent of the spatial object as the cropping boundary.

To illustrate this, we will crop the Canopy Height Model (CHM) to only include the **area of interest (AOI)**. Letâs start by plotting the full extent of the CHM data and overlay where the AOI falls within it. The boundaries of the AOI will be colored blue, and we use `fill = NA` to make the area transparent.



```{r from-ep2}
#| eval: false

ggplot() +
  geom_raster(data = CHM_TUD_df, aes(x = x, y = y, fill = layer)) + 
  scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) +
  geom_sf(data = oai_boundary_tudlib, color = "blue", fill = NA) +
  coord_sf()

```

## Crop a Raster Using Vector Extent


:::: {.columns}

::: {.column width="50%"}
![](fig/rmd-04c-from-ep2-1.png)

:::

::: {.column width="50%"}

Now that we have visualized the area of the CHM we want to subset, we can perform the cropping operation. We are going to use the `crop()` function from the `raster` package to create a new object with only the portion of the CHM data that falls within the boundaries of the AOI.


```{r}
#| eval: false
CHM_TUD_Cropped <- crop(
  x = CHM_TUD,
  y = st_as_sf(oai_boundary_tudlib)
  )
```


:::

::::
## Crop a Raster Using Vector Extent

Now we can plot:
- the cropped CHM data 
- a boundary box showing the full CHM extent. 

However, remember, since this is raster data, we need to convert to a data frame in order to plot using ggplot. 


## Crop a Raster Using Vector Extent

To get the boundary box from CHM, the `st_bbox()` will extract the 4 corners of the rectangle that encompass all the features contained in this object. The `st_as_sfc()` converts these 4 coordinates into a polygon that we can plot:


```{r}
#| eval: false
CHM_TUD_Cropped_df <- as.data.frame(CHM_TUD_Cropped, xy = TRUE)


ggplot() +
  geom_sf(data = st_as_sfc(st_bbox(CHM_TUD)), fill = "green",
          color = "green", alpha = .2) +  
  geom_raster(data = CHM_TUD_Cropped_df,
              aes(x = x, y = y, fill = layer)) + 
  scale_fill_gradientn(name = "Canopy Height", colors = terrain.colors(10)) + 
  coord_sf()
```


## Crop a Raster Using Vector Extent
:::: {.columns}

::: {.column width="50%"}
![](fig/rmd-04c-unnamed-chunk-4-1.png)
:::

::: {.column width="50%"}
The plot shows that the full CHM extent (plotted in green) is much larger than the resulting cropped raster. Our new cropped CHM now has the same extent as the aoi_boundary_HARV object that was used as a crop extent (blue border below).
:::

::::


## Crop a Raster Using Vector Extent

:::: {.columns}

::: {.column width="50%"}
![](fig/rmd-04c-unnamed-chunk-5-1.png)
:::

::: {.column width="50%"}


```{r}
#| eval: false
ggplot() +
  geom_sf(data = st_as_sfc(
    st_bbox(CHM_TUD)), 
          fill = "green",
          color = "green", 
          alpha = .2) +  
  geom_raster(data = CHM_TUD_Cropped_df,
              aes(x = x, 
                  y = y, 
                  fill = layer)) + 
  scale_fill_gradientn(
    name = "Canopy Height", 
    colors = terrain.colors(10)) + 
  coord_sf()
```

This plot shows that the full CHM extent (plotted in green) is much larger than the resulting cropped raster. 
:::

::::

## Crop a Raster Using Vector Extent

We can look at the extent of all of our other objects for this field site.

The original:
```{r}
#| eval: false
st_bbox(CHM_TUD)
```

The cropped one:
```{r}
#| eval: false
st_bbox(CHM_TUD_Cropped)
```

The area of interest:
```{r}
#| eval: false
st_bbox(oai_boundary_tudlib)
```

Our plot location extent is not the largest but is larger than the AOI Boundary. 


## Extract Raster Pixels Values Using Vector Polygons

:::: {.columns}

::: {.column width="50%"}

Often we want to extract values from a raster layer for particular locations - for example, plot locations that we are sampling on the ground. 

We can extract all pixel values within 20m of our x,y point of interest. These can then be summarized into some value of interest (e.g. mean, maximum, total).


:::

::: {.column width="50%"}
![Image Source: National Ecological Observatory Network (NEON)](fig/BufferSquare.png)
:::

::::

## Extract Raster Pixels Values Using Vector Polygons

To do this in R, we use the `extract()` function. The `extract()` function requires:

- The raster that we wish to extract values from,
- The vector layer containing the polygons that we wish to use as a boundary or boundaries.

We can tell it to store the output values in a data frame using `df = TRUE`. (This is optional, the default is to return a list, NOT a data frame.)

We will begin by extracting all canopy height pixel values located within our `oai_boundary_tudlib` polygon which surrounds the TU Delft Library.

```{r}
#| eval: false
tree_height <- extract(x = CHM_TUD, 
                       y = st_as_sf(oai_boundary_tudlib),
                       df = TRUE)

str(tree_height)
```

When we use the `extract()` function, R extracts the value for each pixel located within the boundary of the polygon being used to perform the extraction - in this case the `oai_boundary_tudlib` object (a single polygon). Here, the function extracted values from 621,642 pixels.



## Extract Raster Pixels Values Using Vector Polygons


:::: {.columns}

::: {.column width="50%"}


We can create a histogram of tree height values within the boundary to better understand the structure or height distribution of trees at our site. We will use the column `layer` from our data frame as our x values, as this column represents the tree heights for each pixel.

```{r}
#| eval: false
ggplot() + 
  geom_histogram(data = tree_height, aes(x = layer)) +
  ggtitle("Histogram of CHM Height Values (m)") +
  xlab("Tree Height") + 
  ylab("Frequency of Pixels")
```


We can also use the `summary()` function to view descriptive statistics including min, max, and mean height values. These values help us better understand vegetation at our field site.

```{r}
#| eval: false
summary(tree_height$layer)
```

:::

::: {.column width="50%"}
![](fig/rmd-04c-unnamed-chunk-16-1.png)
:::
::::



## Summarize Extracted Raster Values

We often want to extract summary values from a raster.

We can tell R the type of summary statistic we are interested in using the `fun = argument`. 

Letâs extract a mean height value for our AOI. 
Because we are extracting only a single number, we will not use the `df = TRUE` argument.

```{r}
#| eval: false
mean_tree_height_AOI <- extract(
  x = CHM_TUD, 
  y = st_as_sf(oai_boundary_tudlib), 
  fun = mean)

head(mean_tree_height_AOI)
```

It appears that the mean height value, extracted from our LiDAR data derived canopy height model is 4.3 meters.



## Extract Data using x,y Locations


:::: {.columns}

::: {.column width="50%"}


We can also extract pixel values from a raster by defining a buffer or area surrounding individual point locations using the `extract()` function. 

To do this we define the summary argument (`fun = mean`) and the buffer distance (`buffer = 20`) which represents the radius of a circular region around each point. 

By default, the units of the buffer are the same units as the dataâs CRS. All pixels that are touched by the buffer region are included in the extract.

:::

::: {.column width="50%"}

![Image Source:National Ecological Observatory Network (NEON)](fig/BufferCircular.png)

:::

::::




## Extract Data using x,y Locations

Letâs put this into practice by figuring out the mean tree height in the 20m around the tower location (`point_Delft`). Because we are extracting only a single number, we will not use the `df = TRUE` argument.

```{r}
#| eval: false
point_Delft <- st_read(here("data", "delft-leisure.shp"))

mean_tree_height_tower <- extract(x = CHM_TUD,
                                  y = point_Delft,
                                  buffer = 20,
                                  fun = mean)

head(mean_tree_height_tower)
```




## `r emo::ji("alarm")` Challenge: Extract Raster Height Values For Plot Locations

```{r}
#| echo: false
#| cache: false
countdown::countdown(minutes = 10)
```


:::: {.columns}

::: {.column width="50%"}


- Use the leisure locations object (`point_Delft`) to extract an average tree height for the area within 20m of each playground and picnic table in the study area. Because there are multiple playgrounds and picnic tables, there will be multiple averages returned, so the `df = TRUE` argument should be used.

- Create a plot showing the mean tree height of each area.


:::

::: {.column width="50%"}
![](fig/rmd-04c-unnamed-chunk-21-1.png)

:::

::::

## Solution
```{r}
#| eval: false
leisure_locations_selection <- point_Delft |> 
  filter(leisure %in% c("playground", "picnic_table"))

# extract data at each plot location
mean_tree_height_plots_TUD <- extract(x = CHM_TUD,
                                       y = leisure_locations_selection,
                                       buffer = 20,
                                       fun = mean,
                                       df = TRUE)

# view data
head(mean_tree_height_plots_TUD)
```

Visualisation of the results: 

```{r}
#| eval: false
ggplot(data = mean_tree_height_plots_TUD, aes(ID, layer)) + 
  geom_col() + 
  ggtitle("Mean Tree Height at each Plot") + 
  xlab("Plot ID") + 
  ylab("Tree Height (m)")
```


## Summary and keypoints

We have seen how to crop a raster to the extent of a vector layer and how to extract values from a raster that correspond to a vector file overlay.

In short:

- Use the `crop()` function to crop a raster object.
- Use the `extract()` function to extract pixels from a raster object that fall within a particular extent boundary.
